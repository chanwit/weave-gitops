// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageAutomationClient is the client API for ImageAutomation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageAutomationClient interface {
	ListImageAutomations(ctx context.Context, in *ListImageAutomationRequest, opts ...grpc.CallOption) (*ListImageAutomationResponse, error)
}

type imageAutomationClient struct {
	cc grpc.ClientConnInterface
}

func NewImageAutomationClient(cc grpc.ClientConnInterface) ImageAutomationClient {
	return &imageAutomationClient{cc}
}

func (c *imageAutomationClient) ListImageAutomations(ctx context.Context, in *ListImageAutomationRequest, opts ...grpc.CallOption) (*ListImageAutomationResponse, error) {
	out := new(ListImageAutomationResponse)
	err := c.cc.Invoke(ctx, "/image_automation.v1.ImageAutomation/ListImageAutomations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageAutomationServer is the server API for ImageAutomation service.
// All implementations must embed UnimplementedImageAutomationServer
// for forward compatibility
type ImageAutomationServer interface {
	ListImageAutomations(context.Context, *ListImageAutomationRequest) (*ListImageAutomationResponse, error)
	mustEmbedUnimplementedImageAutomationServer()
}

// UnimplementedImageAutomationServer must be embedded to have forward compatible implementations.
type UnimplementedImageAutomationServer struct {
}

func (UnimplementedImageAutomationServer) ListImageAutomations(context.Context, *ListImageAutomationRequest) (*ListImageAutomationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageAutomations not implemented")
}
func (UnimplementedImageAutomationServer) mustEmbedUnimplementedImageAutomationServer() {}

// UnsafeImageAutomationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageAutomationServer will
// result in compilation errors.
type UnsafeImageAutomationServer interface {
	mustEmbedUnimplementedImageAutomationServer()
}

func RegisterImageAutomationServer(s grpc.ServiceRegistrar, srv ImageAutomationServer) {
	s.RegisterService(&ImageAutomation_ServiceDesc, srv)
}

func _ImageAutomation_ListImageAutomations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImageAutomationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageAutomationServer).ListImageAutomations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image_automation.v1.ImageAutomation/ListImageAutomations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageAutomationServer).ListImageAutomations(ctx, req.(*ListImageAutomationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageAutomation_ServiceDesc is the grpc.ServiceDesc for ImageAutomation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageAutomation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_automation.v1.ImageAutomation",
	HandlerType: (*ImageAutomationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListImageAutomations",
			Handler:    _ImageAutomation_ListImageAutomations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/imageautomation/imageautomation.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppKustomizationClient is the client API for AppKustomization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppKustomizationClient interface {
	//
	// AddKustomization adds a Kustomization to a cluster via GitOps.
	Add(ctx context.Context, in *AddKustomizationRequest, opts ...grpc.CallOption) (*AddKustomizationResponse, error)
	//
	// RemoveKustomization removes a Kustomization from a cluster via GitOps.
	Remove(ctx context.Context, in *RemoveKustomizationRequest, opts ...grpc.CallOption) (*RemoveKustomizationResponse, error)
}

type appKustomizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAppKustomizationClient(cc grpc.ClientConnInterface) AppKustomizationClient {
	return &appKustomizationClient{cc}
}

func (c *appKustomizationClient) Add(ctx context.Context, in *AddKustomizationRequest, opts ...grpc.CallOption) (*AddKustomizationResponse, error) {
	out := new(AddKustomizationResponse)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.AppKustomization/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appKustomizationClient) Remove(ctx context.Context, in *RemoveKustomizationRequest, opts ...grpc.CallOption) (*RemoveKustomizationResponse, error) {
	out := new(RemoveKustomizationResponse)
	err := c.cc.Invoke(ctx, "/gitops_server.v1.AppKustomization/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppKustomizationServer is the server API for AppKustomization service.
// All implementations must embed UnimplementedAppKustomizationServer
// for forward compatibility
type AppKustomizationServer interface {
	//
	// AddKustomization adds a Kustomization to a cluster via GitOps.
	Add(context.Context, *AddKustomizationRequest) (*AddKustomizationResponse, error)
	//
	// RemoveKustomization removes a Kustomization from a cluster via GitOps.
	Remove(context.Context, *RemoveKustomizationRequest) (*RemoveKustomizationResponse, error)
	mustEmbedUnimplementedAppKustomizationServer()
}

// UnimplementedAppKustomizationServer must be embedded to have forward compatible implementations.
type UnimplementedAppKustomizationServer struct {
}

func (UnimplementedAppKustomizationServer) Add(context.Context, *AddKustomizationRequest) (*AddKustomizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAppKustomizationServer) Remove(context.Context, *RemoveKustomizationRequest) (*RemoveKustomizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedAppKustomizationServer) mustEmbedUnimplementedAppKustomizationServer() {}

// UnsafeAppKustomizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppKustomizationServer will
// result in compilation errors.
type UnsafeAppKustomizationServer interface {
	mustEmbedUnimplementedAppKustomizationServer()
}

func RegisterAppKustomizationServer(s grpc.ServiceRegistrar, srv AppKustomizationServer) {
	s.RegisterService(&AppKustomization_ServiceDesc, srv)
}

func _AppKustomization_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKustomizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppKustomizationServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.AppKustomization/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppKustomizationServer).Add(ctx, req.(*AddKustomizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppKustomization_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKustomizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppKustomizationServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitops_server.v1.AppKustomization/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppKustomizationServer).Remove(ctx, req.(*RemoveKustomizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppKustomization_ServiceDesc is the grpc.ServiceDesc for AppKustomization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppKustomization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitops_server.v1.AppKustomization",
	HandlerType: (*AppKustomizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AppKustomization_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _AppKustomization_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/app/kustomize.proto",
}

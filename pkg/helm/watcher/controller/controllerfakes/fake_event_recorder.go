// Code generated by counterfeiter. DO NOT EDIT.
package controllerfakes

import (
	"sync"

	v1 "k8s.io/api/core/v1"
)

type FakeEventRecorder struct {
	EventfStub        func(v1.ObjectReference, map[string]string, string, string, string, ...interface{}) error
	eventfMutex       sync.RWMutex
	eventfArgsForCall []struct {
		arg1 v1.ObjectReference
		arg2 map[string]string
		arg3 string
		arg4 string
		arg5 string
		arg6 []interface{}
	}
	eventfReturns struct {
		result1 error
	}
	eventfReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventRecorder) Eventf(arg1 v1.ObjectReference, arg2 map[string]string, arg3 string, arg4 string, arg5 string, arg6 ...interface{}) error {
	fake.eventfMutex.Lock()
	ret, specificReturn := fake.eventfReturnsOnCall[len(fake.eventfArgsForCall)]
	fake.eventfArgsForCall = append(fake.eventfArgsForCall, struct {
		arg1 v1.ObjectReference
		arg2 map[string]string
		arg3 string
		arg4 string
		arg5 string
		arg6 []interface{}
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.EventfStub
	fakeReturns := fake.eventfReturns
	fake.recordInvocation("Eventf", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.eventfMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEventRecorder) EventfCallCount() int {
	fake.eventfMutex.RLock()
	defer fake.eventfMutex.RUnlock()
	return len(fake.eventfArgsForCall)
}

func (fake *FakeEventRecorder) EventfCalls(stub func(v1.ObjectReference, map[string]string, string, string, string, ...interface{}) error) {
	fake.eventfMutex.Lock()
	defer fake.eventfMutex.Unlock()
	fake.EventfStub = stub
}

func (fake *FakeEventRecorder) EventfArgsForCall(i int) (v1.ObjectReference, map[string]string, string, string, string, []interface{}) {
	fake.eventfMutex.RLock()
	defer fake.eventfMutex.RUnlock()
	argsForCall := fake.eventfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeEventRecorder) EventfReturns(result1 error) {
	fake.eventfMutex.Lock()
	defer fake.eventfMutex.Unlock()
	fake.EventfStub = nil
	fake.eventfReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventRecorder) EventfReturnsOnCall(i int, result1 error) {
	fake.eventfMutex.Lock()
	defer fake.eventfMutex.Unlock()
	fake.EventfStub = nil
	if fake.eventfReturnsOnCall == nil {
		fake.eventfReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.eventfReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEventRecorder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.eventfMutex.RLock()
	defer fake.eventfMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventRecorder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

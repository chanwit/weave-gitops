syntax = "proto3";

package gitops_server.v1;

option go_package = "github.com/weaveworks/weave-gitops/core/api/apps";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Weave GitOps Application API",
    version: "0.1",
    description: "The Weave GitOps Application API handles operations for Weave GitOps Applications",
  },
  consumes: "apps/json",
  produces: "apps/json",
};

message App {
  string name = 1;
  string description = 2;
  string display_name = 3;
  string id = 4;
  repeated string kustomizations = 5;
  repeated string helmReleases = 6;
  repeated string sources = 7;
}

message AddAppRequest {
  string repo_name = 1;
  string name = 2;
  string description = 3;
  string display_name = 4;
}

message AddAppResponse {
  bool success = 1;
  App app = 2;
}

message GetAppRequest {
  string repo_name = 1;
  string app_name = 2;
}

message GetAppResponse {
  App app = 1;
}

message ListAppRequest {
  string repo_name = 1;
}

message ListAppResponse {
  repeated App apps = 1; // A list of applications
}

message RemoveAppRequest {
  string repo_name = 1;
  string name = 2;
  string namespace = 3;
  bool   autoMerge = 4;
}

message RemoveAppResponse {
  bool success = 1;
}

service Apps {
  /*
    * AddApplication adds an Application to a cluster via GitOps.
    */
  rpc AddApp(AddAppRequest) returns (AddAppResponse) {
    option (google.api.http) = {
      post : "/v1/repo/{repo_name}/app"
      body: "*"
    };
  }

  /**
  * GetApplication returns a given application
  */
  rpc GetApp(GetAppRequest) returns (GetAppResponse) {
    option (google.api.http) = {
      get : "/v1/repo/{repo_name}/app/{app_name}"
    };
  }

  /**
     * ListApplications returns the list of WeGo applications that the authenticated user has access to.
    */
  rpc ListApps(ListAppRequest) returns (ListAppResponse) {
    option (google.api.http) = {
      get : "/v1/repo/{repo_name}/app"
    };
  }

  /*
  * RemoveApplication removes an Application from a cluster via GitOps.
  */
  rpc RemoveApp(RemoveAppRequest) returns (RemoveAppResponse) {
    option (google.api.http) = {
      delete : "/v1/repo/{repo_name}/app/{name}"
      body: "*"
    };
  }
}
